{"version":3,"sources":["classes/LoadButtonSettings.ts","GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["LoadButtonSettings","namePart","dataCyPrefix","onClickCallback","Promise","this","GoodsList","React","memo","goods","length","className","map","good","id","name","color","styles","borderColor","style","API_URL","getAllGoods","a","fetch","response","json","getFirstFiveGoods","sort","nameA","nameB","localeCompare","slice","getRedGoods","filter","loadButtonsSettings","App","useState","setGoods","isLoaded","setIsLoaded","currentLoadingMode","setCurrentLoadingMode","loadButtonSettings","isCurrentlyUsed","type","classNames","onClick","loadedGoods","JSON","stringify","ReactDOM","render","document","getElementById"],"mappings":"0SAEaA,EAAb,aASE,WACEC,EACAC,EACAC,GACC,yBAZHF,SAAW,GAYT,KAVFC,aAAe,GAUb,KARFC,gBAAkB,WAChB,OAAO,IAAIC,SAAgB,gBAQ3BC,KAAKJ,SAAWA,EAChBI,KAAKH,aAAeA,EACpBG,KAAKF,gBAAkBA,K,eCTdG,EAA6BC,IAAMC,MAC9C,gBAAGC,EAAH,EAAGA,MAAH,OACE,mCACGA,EAAMC,OAAS,EACd,oBAAIC,UAAU,aAAd,SACGF,EAAMG,KAAI,SAAAC,GACT,IAAQC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MACZC,EAAS,CACbD,QACAE,YAAaF,GAGf,OACE,oBACEL,UAAU,mBAEV,UAAQ,OACRQ,MAAOF,EAJT,SAMGF,GAJID,QAWX,kDChCJM,EAAO,wEAEN,SAAeC,IAAtB,+B,4CAAO,4BAAAC,EAAA,sEACkBC,MAAMH,GADxB,cACCI,EADD,yBAGEA,EAASC,QAHX,4C,sBAMA,IAAMC,EAAiB,uCAAG,4BAAAJ,EAAA,sEACXD,IADW,cACzBZ,EADyB,QAGzBkB,MAAK,kBAASC,EAAT,EAAGb,KAAuBc,EAA1B,EAAoBd,KAApB,OACTa,EAAME,cAAcD,MAJS,kBAOxBpB,EAAMsB,MAAM,EAAG,IAPS,2CAAH,qDAUjBC,EAAW,uCAAG,4BAAAV,EAAA,sEACLD,IADK,cACnBZ,EADmB,yBAGlBA,EAAMwB,QAAO,kBAAyB,QAAzB,EAAGjB,UAHE,2CAAH,qDCVlBkB,G,MAAsB,CAC1B,IAAIlC,EAAmB,MAAO,MAAOqB,GACrC,IAAIrB,EAAmB,UAAW,aAAc0B,GAChD,IAAI1B,EAAmB,MAAO,MAAOgC,KAG1BG,EAAgB,WAC3B,MAA0BC,mBAAiB,IAA3C,mBAAO3B,EAAP,KAAc4B,EAAd,KACA,EAAgCD,oBAAS,GAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAAoDH,mBAAS,IAA7D,mBAAOI,EAAP,KAA2BC,EAA3B,KAEA,OACE,sBAAK9B,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,mCAIA,qBAAKA,UAAU,kBAAf,SACGuB,EAAoBtB,KAAI,SAAA8B,GACvB,IACEzC,EAGEyC,EAHFzC,SACAC,EAEEwC,EAFFxC,aACAC,EACEuC,EADFvC,gBAGIwC,EAAkB1C,IAAauC,EAErC,OACE,wBACEI,KAAK,SACLjC,UAAWkC,IACT,SACA,UACA,CAAE,WAAYF,IAEhB,oBAAYzC,EAAZ,WACA4C,QAAO,sBAAE,4BAAAxB,EAAA,sEACmBnB,IADnB,OACD4C,EADC,OAGHC,KAAKC,UAAUF,KAAiBC,KAAKC,UAAUxC,IACjD4B,EAASU,GAGXR,GAAY,GACZE,EAAsBxC,GARf,2CARX,wBAmBWA,EAnBX,iBAyBLqC,GACC,cAAC,EAAD,CAAW7B,MAAOA,QC9D1ByC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.629e1d7c.chunk.js","sourcesContent":["import { Good } from '../types/Good';\n\nexport class LoadButtonSettings {\n  namePart = '';\n\n  dataCyPrefix = '';\n\n  onClickCallback = () => {\n    return new Promise<Good[]>(() => {});\n  };\n\n  constructor(\n    namePart: string,\n    dataCyPrefix: string,\n    onClickCallback: () => Promise<Good[]>,\n  ) {\n    this.namePart = namePart;\n    this.dataCyPrefix = dataCyPrefix;\n    this.onClickCallback = onClickCallback;\n  }\n}\n","import React from 'react';\nimport { Good } from './types/Good';\n\nimport './GoodsList.scss';\n\ntype Props = {\n  goods: Good[];\n};\n\nexport const GoodsList: React.FC<Props> = React.memo(\n  ({ goods }) => (\n    <>\n      {goods.length > 0 ? (\n        <ul className=\"goods-list\">\n          {goods.map(good => {\n            const { id, name, color } = good;\n            const styles = {\n              color,\n              borderColor: color,\n            };\n\n            return (\n              <li\n                className=\"goods-list__item\"\n                key={id}\n                data-cy=\"good\"\n                style={styles}\n              >\n                {name}\n              </li>\n            );\n          })}\n        </ul>\n      )\n        : (\n          <p>\n            No goods yet\n          </p>\n        )}\n    </>\n  ),\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport async function getAllGoods(): Promise<Good[]> {\n  const response = await fetch(API_URL);\n\n  return response.json();\n}\n\nexport const getFirstFiveGoods = async () => {\n  const goods = await getAllGoods();\n\n  goods.sort(({ name: nameA }, { name: nameB }) => (\n    nameA.localeCompare(nameB)\n  ));\n\n  return goods.slice(0, 5);\n};\n\nexport const getRedGoods = async () => {\n  const goods = await getAllGoods();\n\n  return goods.filter(({ color }) => color === 'red');\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.min.css';\n\nimport { Good } from './types/Good';\nimport { LoadButtonSettings } from './classes/LoadButtonSettings';\nimport { GoodsList } from './GoodsList';\nimport { getAllGoods, getFirstFiveGoods, getRedGoods } from './api/goods';\n\nimport './App.scss';\n\nconst loadButtonsSettings = [\n  new LoadButtonSettings('all', 'all', getAllGoods),\n  new LoadButtonSettings('5 first', 'first-five', getFirstFiveGoods),\n  new LoadButtonSettings('red', 'red', getRedGoods),\n];\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [currentLoadingMode, setCurrentLoadingMode] = useState('');\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">\n        Dynamic list of Goods\n      </h1>\n\n      <div className=\"loading-options\">\n        {loadButtonsSettings.map(loadButtonSettings => {\n          const {\n            namePart,\n            dataCyPrefix,\n            onClickCallback,\n          } = loadButtonSettings;\n\n          const isCurrentlyUsed = namePart === currentLoadingMode;\n\n          return (\n            <button\n              type=\"button\"\n              className={classNames(\n                'button',\n                'is-info',\n                { 'is-light': isCurrentlyUsed },\n              )}\n              data-cy={`${dataCyPrefix}-button`}\n              onClick={async () => {\n                const loadedGoods = await onClickCallback();\n\n                if (JSON.stringify(loadedGoods) !== JSON.stringify(goods)) {\n                  setGoods(loadedGoods);\n                }\n\n                setIsLoaded(true);\n                setCurrentLoadingMode(namePart);\n              }}\n            >\n              {`Load ${namePart} goods`}\n            </button>\n          );\n        })}\n      </div>\n\n      {isLoaded && (\n        <GoodsList goods={goods} />\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}