{"version":3,"sources":["classes/LoadButtonSettings.ts","components/LoadingError/LoadingError.tsx","components/GoodsList/GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["LoadButtonSettings","namePart","dataCyPrefix","onClickCallback","Promise","this","LoadingError","className","GoodsList","React","memo","goods","length","map","good","id","name","color","styles","borderColor","style","API_URL","getAllGoods","a","fetch","response","ok","status","statusText","headers","Error","get","includes","json","getFirstFiveGoods","sort","nameA","nameB","localeCompare","slice","getRedGoods","filter","loadButtonsSettings","App","useState","setGoods","isLoading","setIsLoading","isLoaded","setIsLoaded","isFailedLoad","setIsFailedLoad","currentLoadingMode","setCurrentLoadingMode","loadGoods","callback","loadedGoods","JSON","stringify","loadButtonSettings","isCurrentMode","type","classNames","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b03a657f.chunk.js","sourcesContent":["import { Good } from '../types/Good';\n\nexport class LoadButtonSettings {\n  namePart = '';\n\n  dataCyPrefix = '';\n\n  onClickCallback = () => {\n    return new Promise<Good[]>(() => {});\n  };\n\n  constructor(\n    namePart: string,\n    dataCyPrefix: string,\n    onClickCallback: () => Promise<Good[]>,\n  ) {\n    this.namePart = namePart;\n    this.dataCyPrefix = dataCyPrefix;\n    this.onClickCallback = onClickCallback;\n  }\n}\n","import React from 'react';\n\nexport const LoadingError: React.FC = () => (\n  <div className=\"notification is-danger is-light\">\n    An error occured while loading goods!\n  </div>\n);\n","import React from 'react';\nimport { Good } from '../../types/Good';\n\nimport './GoodsList.scss';\n\ntype Props = {\n  goods: Good[];\n};\n\nexport const GoodsList: React.FC<Props> = React.memo(\n  ({ goods }) => (\n    <>\n      {goods.length > 0 ? (\n        <ul className=\"goods-list\">\n          {goods.map(good => {\n            const { id, name, color } = good;\n            const styles = {\n              color,\n              borderColor: color,\n            };\n\n            return (\n              <li\n                className=\"goods-list__item\"\n                key={id}\n                data-cy=\"good\"\n                style={styles}\n              >\n                {name}\n              </li>\n            );\n          })}\n        </ul>\n      )\n        : (\n          <p>\n            No goods yet\n          </p>\n        )}\n    </>\n  ),\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport async function getAllGoods(): Promise<Good[]> {\n  const response = await fetch(API_URL);\n  const {\n    ok,\n    status,\n    statusText,\n    headers,\n  } = response;\n\n  if (!ok) {\n    throw new Error(`${status} - ${statusText}`);\n  }\n\n  if (!headers.get('content-type')?.includes('application/json')) {\n    throw new Error('Content-type is not supoorted');\n  }\n\n  return response.json();\n}\n\nexport const getFirstFiveGoods = async () => {\n  const goods = await getAllGoods();\n\n  goods.sort(({ name: nameA }, { name: nameB }) => (\n    nameA.localeCompare(nameB)\n  ));\n\n  return goods.slice(0, 5);\n};\n\nexport const getRedGoods = async () => {\n  const goods = await getAllGoods();\n\n  return goods.filter(({ color }) => color === 'red');\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.min.css';\n\nimport { Good } from './types/Good';\nimport { LoadButtonSettings } from './classes/LoadButtonSettings';\nimport { LoadingError } from './components/LoadingError/LoadingError';\nimport { GoodsList } from './components/GoodsList/GoodsList';\nimport { getAllGoods, getFirstFiveGoods, getRedGoods } from './api/goods';\n\nimport './App.scss';\n\nconst loadButtonsSettings = [\n  new LoadButtonSettings('all', 'all', getAllGoods),\n  new LoadButtonSettings('5 first', 'first-five', getFirstFiveGoods),\n  new LoadButtonSettings('red', 'red', getRedGoods),\n];\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isFailedLoad, setIsFailedLoad] = useState(false);\n  const [currentLoadingMode, setCurrentLoadingMode] = useState('');\n\n  const loadGoods = async (\n    callback: () => Promise<Good[]>,\n    namePart: string,\n  ) => {\n    setIsLoaded(false);\n    setIsFailedLoad(false);\n    setCurrentLoadingMode(namePart);\n    setIsLoading(true);\n\n    try {\n      const loadedGoods = await callback();\n\n      if (JSON.stringify(loadedGoods) !== JSON.stringify(goods)) {\n        setGoods(loadedGoods);\n      }\n\n      setIsLoaded(true);\n      setIsLoading(false);\n    } catch (error) {\n      setIsFailedLoad(true);\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">\n        Dynamic list of Goods\n      </h1>\n\n      <div className=\"loading-options\">\n        {loadButtonsSettings.map(loadButtonSettings => {\n          const {\n            namePart,\n            dataCyPrefix,\n            onClickCallback,\n          } = loadButtonSettings;\n\n          const isCurrentMode = namePart === currentLoadingMode;\n\n          return (\n            <button\n              key={namePart}\n              type=\"button\"\n              className={classNames(\n                'button',\n                'is-info',\n                { 'is-light': !isCurrentMode },\n                { 'is-loading': isCurrentMode && isLoading },\n              )}\n              data-cy={`${dataCyPrefix}-button`}\n              onClick={() => loadGoods(onClickCallback, namePart)}\n            >\n              {`Load ${namePart} goods`}\n            </button>\n          );\n        })}\n      </div>\n\n      {isFailedLoad && (\n        <LoadingError />\n      )}\n\n      {isLoaded && (\n        <GoodsList goods={goods} />\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}