{"version":3,"sources":["components/LoadButton/LoadButton.tsx","classes/LoadButtonSettings.ts","components/LoadingError/LoadingError.tsx","components/GoodsList/GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["LoadButton","settings","isCurrentMode","isLoading","load","namePart","dataCyPrefix","onClickCallback","type","className","classNames","onClick","LoadButtonSettings","Promise","this","LoadingError","GoodsList","React","memo","goods","length","map","good","id","name","color","styles","borderColor","style","API_URL","getAllGoods","a","fetch","response","ok","status","statusText","headers","Error","get","includes","json","getFirstFiveGoods","sort","nameA","nameB","localeCompare","slice","getRedGoods","filter","loadButtonsSettings","App","useState","setGoods","setIsLoading","isFailedLoad","setIsFailedLoad","currentLoadingMode","setCurrentLoadingMode","loadGoods","callback","loadedGoods","JSON","stringify","loadButtonSettings","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.44865e25.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport { Good } from '../../types/Good';\nimport { LoadButtonSettings } from '../../classes/LoadButtonSettings';\n\ntype Props = {\n  settings: LoadButtonSettings;\n  isCurrentMode: boolean;\n  isLoading: boolean;\n  load: (\n    callback: () => Promise<Good[]>,\n    namePart: string,\n  ) => Promise<void>;\n};\n\nexport const LoadButton: React.FC<Props> = ({\n  settings,\n  isCurrentMode,\n  isLoading,\n  load,\n}) => {\n  const {\n    namePart,\n    dataCyPrefix,\n    onClickCallback,\n  } = settings;\n\n  return (\n    <button\n      key={namePart}\n      type=\"button\"\n      className={classNames(\n        'button',\n        'is-info',\n        { 'is-light': !isCurrentMode },\n        { 'is-loading': isCurrentMode && isLoading },\n      )}\n      data-cy={`${dataCyPrefix}-button`}\n      onClick={() => {\n        load(onClickCallback, namePart);\n      }}\n    >\n      {`Load ${namePart} goods`}\n    </button>\n  );\n};\n","import { Good } from '../types/Good';\n\nexport class LoadButtonSettings {\n  namePart = '';\n\n  dataCyPrefix = '';\n\n  onClickCallback = () => {\n    return new Promise<Good[]>(() => {});\n  };\n\n  constructor(\n    namePart: string,\n    dataCyPrefix: string,\n    onClickCallback: () => Promise<Good[]>,\n  ) {\n    this.namePart = namePart;\n    this.dataCyPrefix = dataCyPrefix;\n    this.onClickCallback = onClickCallback;\n  }\n}\n","import React from 'react';\n\nexport const LoadingError: React.FC = () => (\n  <div className=\"notification is-danger is-light\">\n    An error occured while loading goods!\n  </div>\n);\n","import React from 'react';\nimport { Good } from '../../types/Good';\n\nimport './GoodsList.scss';\n\ntype Props = {\n  goods: Good[];\n};\n\nexport const GoodsList: React.FC<Props> = React.memo(\n  ({ goods }) => (\n    <>\n      {goods.length > 0 ? (\n        <ul className=\"goods-list\">\n          {goods.map(good => {\n            const { id, name, color } = good;\n            const styles = {\n              color,\n              borderColor: color,\n            };\n\n            return (\n              <li\n                className=\"goods-list__item\"\n                key={id}\n                data-cy=\"good\"\n                style={styles}\n              >\n                {name}\n              </li>\n            );\n          })}\n        </ul>\n      )\n        : (\n          <p>\n            No goods yet\n          </p>\n        )}\n    </>\n  ),\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport async function getAllGoods(): Promise<Good[]> {\n  const response = await fetch(API_URL);\n  const {\n    ok,\n    status,\n    statusText,\n    headers,\n  } = response;\n\n  if (!ok) {\n    throw new Error(`${status} - ${statusText}`);\n  }\n\n  if (!headers.get('content-type')?.includes('application/json')) {\n    throw new Error('Content-type is not supoorted');\n  }\n\n  return response.json();\n}\n\nexport const getFirstFiveGoods = async () => {\n  const goods = await getAllGoods();\n\n  goods.sort(({ name: nameA }, { name: nameB }) => (\n    nameA.localeCompare(nameB)\n  ));\n\n  return goods.slice(0, 5);\n};\n\nexport const getRedGoods = async () => {\n  const goods = await getAllGoods();\n\n  return goods.filter(({ color }) => color === 'red');\n};\n","import React, { useState } from 'react';\n// import classNames from 'classnames';\nimport 'bulma/css/bulma.min.css';\n\nimport { Good } from './types/Good';\nimport { LoadButton } from './components/LoadButton/LoadButton';\nimport { LoadButtonSettings } from './classes/LoadButtonSettings';\nimport { LoadingError } from './components/LoadingError/LoadingError';\nimport { GoodsList } from './components/GoodsList/GoodsList';\nimport { getAllGoods, getFirstFiveGoods, getRedGoods } from './api/goods';\n\nimport './App.scss';\n\nconst loadButtonsSettings = [\n  new LoadButtonSettings('all', 'all', getAllGoods),\n  new LoadButtonSettings('5 first', 'first-five', getFirstFiveGoods),\n  new LoadButtonSettings('red', 'red', getRedGoods),\n];\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFailedLoad, setIsFailedLoad] = useState(false);\n  const [currentLoadingMode, setCurrentLoadingMode] = useState('');\n\n  const loadGoods = async (\n    callback: () => Promise<Good[]>,\n    namePart: string,\n  ) => {\n    if (namePart !== currentLoadingMode) {\n      setIsFailedLoad(false);\n      setCurrentLoadingMode(namePart);\n      setIsLoading(true);\n\n      try {\n        const loadedGoods = await callback();\n\n        if (JSON.stringify(loadedGoods) !== JSON.stringify(goods)) {\n          setGoods(loadedGoods);\n        }\n\n        setIsLoading(false);\n      } catch (error) {\n        setIsFailedLoad(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">\n        Dynamic list of Goods\n      </h1>\n\n      <div className=\"loading-options\">\n        {loadButtonsSettings.map(loadButtonSettings => {\n          const { namePart } = loadButtonSettings;\n          const isCurrentMode = namePart === currentLoadingMode;\n\n          return (\n            <LoadButton\n              key={namePart}\n              settings={loadButtonSettings}\n              isCurrentMode={isCurrentMode}\n              isLoading={isLoading}\n              load={loadGoods}\n            />\n          );\n        })}\n      </div>\n\n      {isFailedLoad && (\n        <LoadingError />\n      )}\n\n      {goods.length > 0 && !isLoading && (\n        <GoodsList goods={goods} />\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}